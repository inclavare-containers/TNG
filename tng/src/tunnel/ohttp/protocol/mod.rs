use serde::{Deserialize, Serialize};
pub mod metadata;

/// Request structure for the key configuration endpoint
#[derive(Serialize, Deserialize, Debug)]
pub struct KeyConfigRequest {
    /// The request for attestation of server side
    pub attestation_request: Option<AttestationRequest>,
}

#[derive(Serialize, Deserialize, Debug)]
#[serde(rename_all = "snake_case", tag = "model")]
pub enum AttestationRequest {
    Passport,

    BackgroundCheck {
        /// Challenge token. This is a JWT string obtained from the attestation service
        challenge_token: String,
    },
}

/// Response structure for the key configuration endpoint
#[derive(Serialize, Deserialize, Debug)]
pub struct KeyConfigResponse {
    /// HPKE (Hybrid Public Key Encryption) key configuration
    pub hpke_key_config: HpkeKeyConfig,

    /// Attestation information - can be either an attestation result (passport model)
    /// or evidence (background check model)
    pub attestation_info: Option<ServerAttestationInfo>,
}

/// HPKE key configuration structure
#[derive(Serialize, Deserialize, Debug)]
pub struct HpkeKeyConfig {
    /// Expiration timestamp for this configuration
    pub expire_timestamp: u64,

    /// A base64 encoded list of key configurations, each entry is a Individual key configuration entry. Defined in Section 3.1 of RFC 9458.
    pub encoded_key_config_list: String,
}

/// Enum to differentiate between passport model and background check model
/// for attestation information in the key configuration response
#[derive(Serialize, Deserialize, Debug)]
#[serde(rename_all = "snake_case", tag = "model")]
pub enum ServerAttestationInfo {
    /// Passport model - server provides attestation result
    Passport {
        /// A JWT string representing the server's own Attestation Result
        /// This is used only in Client verification + passport model scenario
        attestation_result: AttestationResultJwt,
    },

    /// Background check model - server provides evidence
    BackgroundCheck {
        /// Evidence data containing the nonce
        /// This is used only in Client verification + background check model scenario
        evidence: String,
    },
}

#[derive(Serialize, Deserialize, Debug)]
pub struct AttestationResultJwt(pub String);

/// Response structure for the attestation challenge endpoint
#[derive(Serialize, Deserialize, Debug)]
pub struct AttestationChallengeResponse {
    /// A JWT string containing the challenge token
    pub challenge_token: String,
}

/// Request structure for the attestation verification endpoint
#[derive(Serialize, Deserialize, Debug)]
pub struct AttestationVerifyRequest {
    /// The JWT challenge token obtained from the challenge endpoint
    pub challenge_token: String,

    /// Evidence data containing the nonce
    pub evidence: String,
}

/// Response structure for the attestation verification endpoint
#[derive(Serialize, Deserialize, Debug)]
pub struct AttestationVerifyResponse {
    /// The attestation result JWT generated by the Attestation Service
    pub attestation_result: String,
}
