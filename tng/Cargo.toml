[package]
authors.workspace = true
edition.workspace = true
license.workspace = true
name = "tng"
repository.workspace = true
version.workspace = true

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
again = "0.1.2"
anyhow = {workspace = true}
async-stream = "0.3.6"
async-trait = "0.1.88"
auto_enums = {version = "0.8", features = ["std", "tokio1"]}
base64 = "0.22.1"
bhttp = {git = "https://github.com/inclavare-containers/ohttp.git", rev = "cda036a", features = ["http-compat"]}
bytes = {workspace = true}
cidr = {version = "0.2.3", features = ["serde"]}
clap = {version = "4.5.39", features = ["derive"]}
console-subscriber = {version = "0.4.1", optional = true}
const_format = "0.2.34"
derivative = "2.2.0"
either = "1.15.0"
fast-socks5 = {git = "https://github.com/dizda/fast-socks5.git", rev = "4c8985c", optional = true}
futures = {workspace = true}
getrandom = {version = "0.3"}
h2 = {version = "0.4.10", features = ["stream"]}
hex = {workspace = true}
hpke = "0.13.0"
http = {workspace = true}
http-body = "1.0.1"
http-body-util = {workspace = true}
httparse = "1.10.1"
hyper = {workspace = true}
hyper-util = {workspace = true}
indexmap = {version = "2.9.0", features = ["serde"]}
itertools = "0.14.0"
nix = {version = "0.29.0", features = ["process", "signal", "socket", "net"]}
ohttp = {git = "https://github.com/inclavare-containers/ohttp.git", rev = "cda036a"}
opentelemetry = {version = "0.29.1", optional = true}
opentelemetry-otlp = {version = "0.29.0", optional = true, default-features = false, features = [
  "logs",
  "metrics",
  "grpc-tonic",
  "gzip-tonic",
  "tls-webpki-roots",
  "reqwest-client",
  "http-proto",
  "http-json",
  "reqwest-rustls-webpki-roots",
]}
opentelemetry-stdout = {version = "0.29.0", optional = true}
opentelemetry_sdk = {version = "0.29.0", optional = true, features = [
  "experimental_async_runtime",
  "experimental_metrics_periodicreader_with_async_runtime",
  "experimental_logs_batch_log_processor_with_async_runtime",
  "experimental_trace_batch_span_processor_with_async_runtime",
  "rt-tokio",
]}
pin-project = "1"
pin-project-lite = "0.2.16"
portpicker = {version = "0.1.1", optional = true}# to disable mio
prost = "0.14.1"
prost-types = "0.14"
rand = "0.9.1"
rand_chacha = "0.9.0"
regex = {workspace = true}
reqwest = {workspace = true, features = ["stream"]}
rustls = {version = "0.23.27", default-features = false, features = ["logging", "std", "tls12", "ring", "brotli"]}
rustls-pemfile = "2.2.0"
scopeguard = "1.2.0"
serde = {workspace = true}
serde_json = {workspace = true}
serde_variant = "0.1.3"
serde_with = {version = "3.12.0", features = ["json"]}
shadow-rs = {version = "=1.0.0", default-features = false}
spin = {version = "0.10.0", default-features = false, features = ["mutex", "spin_mutex"]}
strum = "0.27.1"
strum_macros = "0.27.1"
tempfile = "3.20.0"
thiserror = "2.0"
tokio-graceful = {workspace = true}
tokio-rustls = {version = "0.26.2", default-features = false, features = ["logging", "tls12", "ring"]}
tokio-util = {version = "0.7.15", features = ["compat"]}
tonic = {version = "0.12.3", optional = true}
tower = {version = "0.5", features = ["util"]}
tower-http = {version = "0.6.6", features = ["trace", "set-header", "cors"]}
tracing = "0.1"
tracing-futures = {version = "0.2.5", features = ["futures-03"]}
tracing-opentelemetry = {version = "0.30.0", optional = true}
tracing-subscriber = {version = "0.3", features = ["env-filter"]}
url = "2.5"
which = {version = "7.0.3", optional = true}
x509-cert = {version = "0.2.5"}

[target.'cfg(not(all(target_arch = "wasm32", target_vendor = "unknown", target_os = "unknown")))'.dependencies]
async-tungstenite = {version = "0.25.1", optional = true, features = ["tokio-runtime"]}
axum = {version = "0.8.4", features = ["tokio", "http1", "http2", "ws"]}
rats-cert = {git = "https://github.com/inclavare-containers/rats-rs.git", rev = "15690513da0ad14795fbd3b8ee1c4dcbfdee3037", default-features = false, features = ["crypto-rustcrypto", "attester-coco", "verifier-coco"]}
socket2 = {version = "0.5.10"}
tokio = {workspace = true, features = ["rt-multi-thread", "time"]}
ws_stream_tungstenite = {version = "0.13.0"}

[target.'cfg(all(target_arch = "wasm32", target_vendor = "unknown", target_os = "unknown"))'.dependencies]
axum = {version = "0.8.4", default-features = false, features = ["json"]}# to disable mio
rats-cert = {git = "https://github.com/inclavare-containers/rats-rs.git", rev = "15690513da0ad14795fbd3b8ee1c4dcbfdee3037", default-features = false, features = ["crypto-rustcrypto", "verifier-coco"]}
ring = {version = "0.17.11", features = ["wasm32_unknown_unknown_js"]}
rustls-pki-types = {version = "*", features = ["web"]}
serde-wasm-bindgen = "0.6.5"
tokio = {workspace = true}
tokio_with_wasm = {workspace = true}
wasm-bindgen-futures = {version = "0.4.50"}
web-time = "1.1.0"
ws_stream_wasm = {version = "=0.7.5"}

[build-dependencies]
cfg_aliases = "0.2.1"
prost-build = "0.14.1"
shadow-rs = {version = "=1.0.0", default-features = false, features = ["tzdb", "build"]}

[dev-dependencies]
ctor = "=0.4.1"
hyper = {workspace = true, features = ["http1", "http2", "client", "server"]}
once_cell = "1.21.3"
portpicker = "0.1.1"

[features]
default = [
  "tokio-console",
  "metric",
  "trace",
  "ingress-http-proxy",
  "ingress-mapping",
  "ingress-netfilter",
  "ingress-socks5",
  "egress-mapping",
  "egress-netfilter",
]
egress = ["hyper/server", "dep:async-tungstenite"]
egress-mapping = ["egress"]
egress-netfilter = ["egress", "dep:which"]
ingress = ["dep:async-tungstenite"]
ingress-http-proxy = ["ingress", "hyper/client"]
ingress-mapping = ["ingress"]
ingress-netfilter = ["ingress", "dep:portpicker", "dep:which"]
ingress-socks5 = ["ingress", "dep:fast-socks5"]
metric = ["dep:tonic", "dep:opentelemetry", "dep:opentelemetry-otlp", "dep:opentelemetry-stdout", "dep:opentelemetry_sdk", "dep:tracing-opentelemetry"]
tokio-console = ["dep:console-subscriber", "tokio/tracing"]
trace = [
  "dep:tonic",
  "dep:opentelemetry",
  "dep:opentelemetry-otlp",
  "dep:opentelemetry-stdout",
  "dep:opentelemetry_sdk",
  "dep:tracing-opentelemetry",
]
